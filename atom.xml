<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Python</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000/"/>
 <updated>2018-11-05T20:51:37+05:30</updated>
 <id>http://localhost:4000</id>
 <author>
   <name>Mark Otto</name>
   <email>markdotto@gmail.com</email>
 </author>

 
 <entry>
   <title>Binary distributing a python package</title>
   <link href="http://localhost:4000/2018/11/01/binary-dist-post/"/>
   <updated>2018-11-01T00:00:00+05:30</updated>
   <id>http://localhost:4000/2018/11/01/binary-dist-post</id>
   <content type="html">&lt;p&gt;Python Packages are created by using &lt;a href=&quot;https://github.com/raghavan97/python_programs/blob/master/packaging/setup.py&quot;&gt;setup.py&lt;/a&gt;. The &lt;strong&gt;setup.py&lt;/strong&gt; describes all aspects of a package like name, version, description, files etc.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;pure&lt;/em&gt; python package is where the package contains of only python files. This is relatively easy to package and distribute since the python files by itself have no dependency on the Operating System.&lt;/p&gt;

&lt;p&gt;A package that contains an Operating System dependent files is usually distributed using &lt;strong&gt;wheels&lt;/strong&gt;. A &lt;em&gt;wheel&lt;/em&gt; is generated by running the following command&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; python setup.py bdist_wheel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The output of the above command is a wheel file(.whl extension) generated under dist directory. The generated wheel file name contains many details.&lt;/p&gt;

&lt;p&gt;A sample wheel file name is minty-0.0.4-cp27-cp27mu-linux_x86_64.whl&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Package name&lt;/th&gt;
      &lt;th&gt;version tag&lt;/th&gt;
      &lt;th&gt;py tag&lt;/th&gt;
      &lt;th&gt;abi tag&lt;/th&gt;
      &lt;th&gt;os tag&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;minty&lt;/td&gt;
      &lt;td&gt;0.0.4&lt;/td&gt;
      &lt;td&gt;cp27&lt;/td&gt;
      &lt;td&gt;cp27mu&lt;/td&gt;
      &lt;td&gt;linux_x86_64&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;For having a single wheel file to cater to all the variants of linux, a os tag of &lt;em&gt;manylinux1&lt;/em&gt; is used.&lt;/p&gt;

&lt;p&gt;To generate a wheel file for the &lt;em&gt;manylinux1&lt;/em&gt; , we need to generate the wheel file using a special docker container available at &lt;strong&gt;quay.io/pypa/manylinux1_x86_64&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This docker container allows us to generate 2 wheels one for the narrow unicode(abi tag-cp27m) and wide unicode (abi tag-cp27mu)&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PWD&lt;/span&gt;:/src quay.io/pypa/manylinux1_x86_64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;once inside the container, compile the sources, build the shared library and generate the wheels using the python in the container. A source distribution (sdist) is also built for the operating systems where the wheels are not present&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /src
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;minty/mstplib
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; make clean_build
&lt;span class=&quot;go&quot;&gt;rm -f libmyextn.so csrc.o
make libmyextn.so
make[1]: Entering directory `/src/minty/mstplib'
gcc -fPIC -c csrc.c
gcc -shared csrc.o -lpthread -o libmyextn.so
make[1]: Leaving directory `/src/minty/mstplib'

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /src
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; /opt/_internal/cpython-2.7.15-ucs4/bin/python setup.py bdist_wheel
&lt;span class=&quot;go&quot;&gt;running bdist_wheel
running build
running build_py
creating build
creating build/lib.linux-x86_64-2.7
creating build/lib.linux-x86_64-2.7/minty
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;...
...
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; /opt/_internal/cpython-2.7.15-ucs2/bin/python setup.py bdist_wheel
&lt;span class=&quot;go&quot;&gt;running bdist_wheel
running build
running build_py
creating build
creating build/lib.linux-x86_64-2.7
creating build/lib.linux-x86_64-2.7/minty
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;...
...
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; /opt/_internal/cpython-2.7.15-ucs2/bin/python setup.py sdist
&lt;span class=&quot;go&quot;&gt;running sdist
running egg_info
writing requirements to minty.egg-info/requires.txt
writing minty.egg-info/PKG-INFO
writing top-level names to minty.egg-info/top_level.txt
writing dependency_links to minty.egg-info/dependency_links.txt
reading manifest file 'minty.egg-info/SOURCES.txt'
writing manifest file 'minty.egg-info/SOURCES.txt'
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;...
...
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The python in ucs4 creates a wheel minty-0.0.4-cp27-cp27&lt;strong&gt;mu&lt;/strong&gt;-linux_x86_64.whl
The python in ucs2 creates a wheel minty-0.0.4-cp27-cp27&lt;strong&gt;m&lt;/strong&gt;-linux_x86_64.whl&lt;/p&gt;

&lt;p&gt;These wheels cannot be uploaded as is to pypi for distribution. They need to be checked and repaired by a tool &lt;strong&gt;auditwheel&lt;/strong&gt; with respect to third-party external dependencies.&lt;/p&gt;

&lt;p&gt;auditwheel is installed in a python3 environment using pip install auditwheel.  There are 2 auditwheel commands that can be used,  &lt;strong&gt;show&lt;/strong&gt;  and &lt;strong&gt;repair&lt;/strong&gt;. The &lt;em&gt;show&lt;/em&gt; command tells us if there are any external versioned symbols.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;auditwheel
&lt;span class=&quot;go&quot;&gt;Collecting auditwheel
  Using cached https://files.pythonhosted.org/packages/ac/c8/6b5e135684b8617eff1c2ffe6ac509837de904b852df682d1cd1c15235e8/auditwheel-1.9.0-py3-none-any.whl
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;...
...
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;Installing collected packages: auditwheel
Successfully installed auditwheel-1.9.0

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; auditwheel show minty-0.0.4-cp27-cp27mu-linux_x86_64.whl 
&lt;span class=&quot;go&quot;&gt;minty-0.0.4-cp27-cp27mu-linux_x86_64.whl is consistent with the
following platform tag: &quot;manylinux1_x86_64&quot;.

The wheel references external versioned symbols in these system-
provided shared libraries: libpthread.so.0 with versions
{'GLIBC_2.2.5'}, libc.so.6 with versions {'GLIBC_2.2.5'}

The following external shared libraries are required by the wheel:
{
    &quot;libc.so.6&quot;: &quot;/lib/x86_64-linux-gnu/libc-2.23.so&quot;,
    &quot;libpthread.so.0&quot;: &quot;/lib/x86_64-linux-gnu/libpthread-2.23.so&quot;
}

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; auditwheel repair minty-0.0.4-cp27-cp27mu-linux_x86_64.whl 
&lt;span class=&quot;go&quot;&gt;Repairing minty-0.0.4-cp27-cp27mu-linux_x86_64.whl
Previous filename tags: linux_x86_64
New filename tags: manylinux1_x86_64
Previous WHEEL info tags: cp27-cp27mu-linux_x86_64
New WHEEL info tags: cp27-cp27mu-manylinux1_x86_64

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The distribution of python packages usually happens by uploading to pypi.org. For uploading a package to pypi.org, an account has to create by registering &lt;a href=&quot;https://pypi.org/account/register/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After the registration, the uploading is done by using a utility called &lt;strong&gt;twine&lt;/strong&gt;. We supply the list of the files to be uploaded on the command line. Typically the ‘*.whl’ files and the source distribution minty-*.tar.gz, generated by python setup.py sdist&lt;/p&gt;

&lt;p&gt;&lt;em&gt;twine&lt;/em&gt; uses a file &lt;strong&gt;.pypirc&lt;/strong&gt; in the home directory that contains the user name and password that were used during the registration above.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; ~/.pypirc 
&lt;span class=&quot;go&quot;&gt;[distutils]
index-servers =
  pypi

[pypi]
username: xxxxx
password: yyyyyyyyy

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; twine upload &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; pypi dist/wheelhouse/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.whl dist/minty-&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;twine&lt;/em&gt; can be installed in a python3 environment and used to upload packages which are in python2 environment also.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Python Logging</title>
   <link href="http://localhost:4000/2017/07/01/logging-post/"/>
   <updated>2017-07-01T00:00:00+05:30</updated>
   <id>http://localhost:4000/2017/07/01/logging-post</id>
   <content type="html">&lt;p&gt;Python`s logging module is very versatile and very helpful for debugging issues in Software.This article examines some of the basic concepts of logging.&lt;/p&gt;

&lt;h2 id=&quot;source-code-organization&quot;&gt;Source Code Organization&lt;/h2&gt;

&lt;p&gt;There are 3 modules in the source code &lt;a href=&quot;https://github.com/raghavan97/python_programs/blob/master/logging_example/module1&quot; target=&quot;_blank&quot;&gt;module1&lt;/a&gt;, &lt;a href=&quot;https://github.com/raghavan97/python_programs/blob/master/logging_example/module2&quot; target=&quot;_blank&quot;&gt;module2&lt;/a&gt;, &lt;a href=&quot;https://github.com/raghavan97/python_programs/blob/master/logging_example/module3&quot; target=&quot;_blank&quot;&gt;module3&lt;/a&gt; . In main.py, we call functions from module1, module2. This would prove some of the concepts in logging module.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/logging-tree.png&quot; alt=&quot;hi&quot; class=&quot;inline&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;concepts&quot;&gt;Concepts&lt;/h2&gt;

&lt;p&gt;The root logger is configured by using logging.basicConfig call. We can specify the format of a log message and also the logging level. This configuration is done only once in the code. It is mandated to call basicConfig() before you make the first call using the logger.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;logging&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;format_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(asctime)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(name)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(levelname)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s:'&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(filename)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(lineno)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(funcName)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(module)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(message)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;basicConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEBUG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After the root logger is configured , all the loggers would use the same format and logging level by default.&lt;/p&gt;

&lt;p&gt;When you want to debug a module you might want to increase the logging level for that module. This is done by configuring the logger of that module. This is applicable only to that module.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;logging&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setLevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/raghavan97/python_programs/blob/master/logging_example/module3/main.py&quot; target=&quot;_blank&quot;&gt;main.py&lt;/a&gt; provides the main entry point for the project. It initializes the &lt;em&gt;root&lt;/em&gt; logger. It also has a few log messages to demonstrate the logging at different levels. It calls a function f1 in module m1 and a function f2 from m2.&lt;/p&gt;

&lt;h2 id=&quot;program-execution-and-output&quot;&gt;Program Execution and Output&lt;/h2&gt;

&lt;p&gt;The log messages indicate the time, severity, and also the origin of the message in terms of the source file and line number as follows&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/logging-messages.png&quot; alt=&quot;hi&quot; class=&quot;inline&quot; /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;mi&quot;&gt;2017&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;929&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRITICAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CRITICAL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>Python Application Directory Structure</title>
   <link href="http://localhost:4000/2016/02/11/logger-post/"/>
   <updated>2016-02-11T00:00:00+05:30</updated>
   <id>http://localhost:4000/2016/02/11/logger-post</id>
   <content type="html">&lt;p&gt;One of the things that we need to get right for a python application is the way the project files are organized.&lt;/p&gt;

&lt;p&gt;A correct directory structure makes it easier for&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;importing modules within the project&lt;/li&gt;
  &lt;li&gt;logging messages in the logfile more meaningfully&lt;/li&gt;
  &lt;li&gt;packaging and installation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This blog is about a directory structure that works well on the above counts.&lt;/p&gt;

&lt;h2 id=&quot;project-structure&quot;&gt;Project Structure&lt;/h2&gt;

&lt;p&gt;A project can consist of multiple python modules. Each module might have one or more python source files. A sample project for demonstrating the proposed directory structure is shown below as the output of &lt;strong&gt;tree&lt;/strong&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/dir.png&quot; alt=&quot;hi&quot; class=&quot;inline&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The project contains the following directories and files&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The sources of the project are under a directory &lt;em&gt;my_proj&lt;/em&gt;. Incidentally &lt;em&gt;my_proj&lt;/em&gt; is also a module.&lt;/li&gt;
  &lt;li&gt;There are 2 modules &lt;em&gt;m1&lt;/em&gt; and &lt;em&gt;m2&lt;/em&gt; within &lt;em&gt;my_proj&lt;/em&gt; that contain a source file each.&lt;/li&gt;
  &lt;li&gt;A &lt;em&gt;setup.py&lt;/em&gt; that helps create a pip installable package is at the root of directory tree&lt;/li&gt;
  &lt;li&gt;A script &lt;em&gt;my_app&lt;/em&gt; residing at the root of directory tree. &lt;em&gt;my_app&lt;/em&gt; comes up in the PATH of the user after pip install for starting the application.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/raghavan97/projdir/blob/master/my_proj/main.py&quot;&gt;main.py&lt;/a&gt; provides the main entry point for the project. It initializes the &lt;em&gt;root&lt;/em&gt; logger. It also has a few log messages to demonstrate the logging at different levels. It calls a function in module m1. The directory structure helps the importing of function in any of the modules using project name, module name and source file name as follows&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;my_proj.m1.m1_src&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m1f&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/raghavan97/projdir/blob/master/my_proj/m1/m1_src.py&quot;&gt;m1-src.py&lt;/a&gt; shows how we can change the logging level in any of the source file and log messages. There is a call to a function &lt;em&gt;m2f&lt;/em&gt; from a different module &lt;em&gt;m2&lt;/em&gt; by using the import statement as explained above.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;https://github.com/raghavan97/projdir/blob/master/myapp&quot;&gt;myapp&lt;/a&gt; , we have a script to start the application. Observe that it does not have an extension in the file name. It merely imports the main entry point from &lt;em&gt;my_proj/main&lt;/em&gt;  and invokes it. The import statement follows the same convention as explained above.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;https://github.com/raghavan97/projdir/blob/master/setup.py&quot;&gt;setup.py&lt;/a&gt; we specify &lt;em&gt;my_app&lt;/em&gt; as the script that starts the application. After the package is pip installed &lt;em&gt;my_app&lt;/em&gt; comes up in the PATH and can be used to start the application. In setup.py , we also specify all the packages in the project &lt;em&gt;my_proj&lt;/em&gt;, &lt;em&gt;my_proj.m1&lt;/em&gt; and &lt;em&gt;my_proj.m2&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;build-install-and-execute&quot;&gt;Build, Install and Execute&lt;/h2&gt;

&lt;p&gt;Here is how we build the package, install it and run the app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/packaging.png&quot; alt=&quot;hi&quot; class=&quot;inline&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The log messages indicate the time, severity, and also the origin of the message in terms of the source file and line number as follows&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;mi&quot;&gt;2017&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;02&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;05&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;091&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRITICAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_proj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m1_src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The source file, &lt;em&gt;my_proj.m1.m1_src&lt;/em&gt; is indicated in the regular python dotted notation of module and source file. The line number &lt;em&gt;8&lt;/em&gt; is the next field in the log message.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Property in Python Class</title>
   <link href="http://localhost:4000/2016/02/02/property-post/"/>
   <updated>2016-02-02T00:00:00+05:30</updated>
   <id>http://localhost:4000/2016/02/02/property-post</id>
   <content type="html">&lt;p&gt;Recently we came across an interesting issue in our python project.&lt;/p&gt;

&lt;p&gt;A class was instantiated with a particular value given to a instance variable. A few user actions later, an unexpected value of the instance variable was found. The symptoms ended there.&lt;/p&gt;

&lt;p&gt;An initial attempt of trying to track the assignment of instance variable by code inspection was getting hard because&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;There were a number of places in the code base where the variable was getting assigned&lt;/li&gt;
  &lt;li&gt;Most of the assignments were from other variables in the code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We looked for &lt;a href=&quot;https://sourceware.org/gdb/onlinedocs/gdb/Set-Watchpoints.html&quot;&gt;watch point&lt;/a&gt; support in the python debugger (pdb) that could have simplified in catching the suspect. Unfortunately, pdb did not have watch point support. We did a little bit of googling around, to find other python debuggers with watch point support. The search did not yield any familiar python debuggers having watch point support.&lt;/p&gt;

&lt;p&gt;We discussed a few ways of catching the culprit. The one that I am going to show you now caught my attention, since it was clean and smart.&lt;/p&gt;

&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;

&lt;p&gt;Here is the simulation of the same problem in a small piece of code.&lt;/p&gt;

&lt;p&gt;We have a class &lt;strong&gt;BankCustomer&lt;/strong&gt;, which has 3 attributes &lt;em&gt;name&lt;/em&gt;, &lt;em&gt;id&lt;/em&gt; and &lt;em&gt;balance&lt;/em&gt;. An instance of BankCustomer is created with an initial value of the &lt;em&gt;balance&lt;/em&gt; as 10000. The value of balance has been changed many times to simulate the assignments in different modules.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;inspect&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BankCustomer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cust_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;balance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cust_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cust_id&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;balance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;balance&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BankCustomer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Amit'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;balance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8000&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;balance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;balance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;balance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15000&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;balance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25000&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;balance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The idea is to catch the place where an assignment of a specific unacceptable value takes place. In this example, 5000 is an unacceptable value for balance.&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;p&gt;The way we solve this problem is&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make &lt;em&gt;balance&lt;/em&gt; a property of the class&lt;/li&gt;
  &lt;li&gt;In the property setter, we print the caller branching on the condition of interest&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We make use of the &lt;a href=&quot;https://docs.python.org/2/library/inspect.html&quot;&gt;inspect&lt;/a&gt; module &lt;strong&gt;stack()&lt;/strong&gt; call to get the caller information.&lt;/p&gt;

&lt;p&gt;The following shows the modified code for solving the issue.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/raghavan97/a750f606401a354299b13538c29737fa.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;We run the example. We can see a print that identifies the culprit. The print shows the &lt;em&gt;next executable statement&lt;/em&gt; after the unacceptable assignment.&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;
  &lt;nav&gt;
    &lt;a href=&quot;#&quot; class=&quot;close&quot;&gt;close&lt;/a&gt;
    &lt;a href=&quot;#&quot; class=&quot;minimize&quot;&gt;minimize&lt;/a&gt;
    &lt;a href=&quot;#&quot; class=&quot;deactivate&quot;&gt;deactivate&lt;/a&gt;
  &lt;/nav&gt;
  &lt;h3 class=&quot;title&quot;&gt;Terminal&lt;/h3&gt;
  &lt;pre&gt;
&lt;span class=&quot;command&quot;&gt;python try.py&lt;/span&gt;
&lt;span class=&quot;output&quot;&gt;assigned at try.py:38 code=&amp;quot;c1.balance = 15000&amp;quot;&lt;/span&gt;
  &lt;/pre&gt;
&lt;/div&gt;
</content>
 </entry>
 

</feed>
